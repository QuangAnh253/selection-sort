/**
 * Selection Sort Visualizer
 * Tr·ª±c quan h√≥a thu·∫≠t to√°n s·∫Øp x·∫øp ch·ªçn
 * Author: L√™ Quang Anh
 * Website: https://lequanganh.id.vn
 */

class SelectionSortVisualizer {
    constructor() {
        this.array = [];
        this.steps = [];
        this.currentStep = 0;
        this.isRunning = false;
        this.animationSpeed = 1500; // milliseconds - tƒÉng th·ªùi gian ƒë·ªÉ ƒë·ªçc log
        this.logCounter = 0;
        
        this.initializeElements();
        this.generateRandomArray();
        this.setupEventListeners();
    }

    /**
     * Kh·ªüi t·∫°o c√°c DOM elements
     */
    initializeElements() {
        this.arrayContainer = document.getElementById('arrayContainer');
        this.runBtn = document.getElementById('runBtn');
        this.resetBtn = document.getElementById('resetBtn');
        this.statusEl = document.getElementById('status');
        this.codeLines = document.querySelectorAll('.code-line');
        this.logContainer = document.getElementById('logContainer');
        this.clearLogBtn = document.getElementById('clearLogBtn');
    }

    /**
     * Thi·∫øt l·∫≠p event listeners cho c√°c buttons
     */
    setupEventListeners() {
        this.runBtn.addEventListener('click', () => this.startVisualization());
        this.resetBtn.addEventListener('click', () => this.reset());
        this.clearLogBtn.addEventListener('click', () => this.clearLog());
    }

    /**
     * T·∫°o m·∫£ng ng·∫´u nhi√™n v·ªõi size ph·∫ßn t·ª≠
     * @param {number} size - S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ trong m·∫£ng
     */
    generateRandomArray(size = 8) {
        this.array = [];
        // T·∫°o c√°c s·ªë ng·∫´u nhi√™n t·ª´ 10-99
        for (let i = 0; i < size; i++) {
            this.array.push(Math.floor(Math.random() * 90) + 10);
        }
        this.renderArray();
        this.updateStatus('ƒê√£ t·∫°o m·∫£ng m·ªõi. S·∫µn s√†ng ƒë·ªÉ s·∫Øp x·∫øp!');
    }

    /**
     * Render m·∫£ng th√†nh c√°c bar tr√™n giao di·ªán
     */
    renderArray() {
        this.arrayContainer.innerHTML = '';
        const maxValue = Math.max(...this.array);
        
        this.array.forEach((value, index) => {
            const bar = document.createElement('div');
            bar.className = 'array-bar';
            // T√≠nh chi·ªÅu cao bar d·ª±a tr√™n gi√° tr·ªã (t·ªëi ƒëa 250px)
            bar.style.height = `${(value / maxValue) * 250}px`;
            bar.setAttribute('data-index', index);
            
            // T·∫°o label hi·ªÉn th·ªã gi√° tr·ªã
            const valueLabel = document.createElement('div');
            valueLabel.className = 'array-value';
            valueLabel.textContent = value;
            bar.appendChild(valueLabel);
            
            this.arrayContainer.appendChild(bar);
        });
    }

    /**
     * T·∫°o c√°c b∆∞·ªõc chi ti·∫øt c·ªßa thu·∫≠t to√°n Selection Sort (theo c·ª•m)
     */
    generateSteps() {
        this.steps = [];
        const arr = [...this.array]; // T·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng thay ƒë·ªïi m·∫£ng g·ªëc
        const n = arr.length;

        // B∆∞·ªõc kh·ªüi t·∫°o
        this.steps.push({
            type: 'start',
            codeLine: 0,
            array: [...arr],
            description: 'B·∫Øt ƒë·∫ßu thu·∫≠t to√°n Selection Sort',
            logGroup: {
                icon: 'üöÄ',
                title: 'Kh·ªüi t·∫°o',
                content: [
                    `M·∫£ng ban ƒë·∫ßu: [${arr.join(', ')}]`,
                    `B·∫Øt ƒë·∫ßu s·∫Øp x·∫øp ${n} ph·∫ßn t·ª≠`
                ]
            }
        });

        // V√≤ng l·∫∑p ngo√†i - duy·ªát qua t·ª´ng v·ªã tr√≠
        for (let i = 0; i < n - 1; i++) {
            let minIndex = i;
            const roundSteps = [];
            
            // T·∫°o log cho v√≤ng l·∫∑p hi·ªán t·∫°i
            const beforeArray = [...arr];
            const arrayDisplay = arr.map((val, idx) => 
                idx === i ? `(${val})` : val.toString()
            ).join(', ');
            
            // B∆∞·ªõc b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p
            this.steps.push({
                type: 'round_start',
                codeLine: 2,
                array: [...arr],
                currentPos: i,
                description: `V√≤ng ${i + 1}/${n - 1}`,
                logGroup: {
                    icon: 'üîÑ',
                    title: `V√≤ng ${i + 1}/${n - 1}`,
                    content: [
                        `M·∫£ng tr∆∞·ªõc: [${arrayDisplay}]`,
                        `i = ${i}, arr[i] = ${arr[i]}`
                    ]
                }
            });

            // Kh·ªüi t·∫°o minIndex
            this.steps.push({
                type: 'init_min',
                codeLine: 4,
                array: [...arr],
                currentPos: i,
                minIndex: minIndex,
                description: `Gi·∫£ s·ª≠ ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ ${i} l√† nh·ªè nh·∫•t`
            });

            // T√¨m ph·∫ßn t·ª≠ nh·ªè nh·∫•t trong ph·∫ßn ch∆∞a s·∫Øp x·∫øp
            for (let j = i + 1; j < n; j++) {
                this.steps.push({
                    type: 'compare',
                    codeLine: 6,
                    array: [...arr],
                    currentPos: i,
                    comparePos: j,
                    minIndex: minIndex,
                    description: `So s√°nh arr[${j}] = ${arr[j]} v·ªõi arr[${minIndex}] = ${arr[minIndex]}`
                });

                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                    this.steps.push({
                        type: 'update_min',
                        codeLine: 9,
                        array: [...arr],
                        currentPos: i,
                        comparePos: j,
                        minIndex: minIndex,
                        description: `T√¨m th·∫•y ph·∫ßn t·ª≠ nh·ªè h∆°n! C·∫≠p nh·∫≠t minIndex = ${j}`
                    });
                }
            }

            // Ki·ªÉm tra v√† th·ª±c hi·ªán ho√°n ƒë·ªïi
            let swapInfo = '';
            if (minIndex !== i) {
                swapInfo = `Swap: arr[${i}] ‚Üî arr[${minIndex}]  (${arr[i]} ‚Üî ${arr[minIndex]})`;
                
                // Th·ª±c hi·ªán ho√°n ƒë·ªïi
                let temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
            } else {
                swapInfo = `Kh√¥ng c·∫ßn swap: arr[${i}] = ${arr[i]} ƒë√£ l√† nh·ªè nh·∫•t`;
            }

            const afterArray = [...arr];
            const afterArrayDisplay = afterArray.join(', ');

            // B∆∞·ªõc k·∫øt th√∫c v√≤ng l·∫∑p v·ªõi th√¥ng tin t·ªïng h·ª£p
            this.steps.push({
                type: 'round_complete',
                codeLine: 18,
                array: [...arr],
                currentPos: i,
                sortedIndex: i,
                description: `Ho√†n th√†nh v√≤ng ${i + 1}`,
                logGroup: {
                    icon: '‚úÖ',
                    title: '',
                    content: [
                        `T√¨m min t·ª´ i=${i} ‚Üí minIndex = ${minIndex}, arr[minIndex] = ${arr[i]}`,
                        swapInfo,
                        `M·∫£ng sau : [${afterArrayDisplay}]`,
                        '‚îÄ'.repeat(50)
                    ]
                }
            });
        }

        // K·∫øt th√∫c thu·∫≠t to√°n
        this.steps.push({
            type: 'complete',
            codeLine: 19,
            array: [...arr],
            description: 'Ho√†n th√†nh s·∫Øp x·∫øp!',
            logGroup: {
                icon: 'üéâ',
                title: 'K·∫øt th√∫c',
                content: [
                    'Thu·∫≠t to√°n Selection Sort ho√†n th√†nh!',
                    `M·∫£ng ƒë√£ s·∫Øp x·∫øp: [${arr.join(', ')}]`,
                    `ƒê·ªô ph·ª©c t·∫°p: O(n¬≤) v·ªõi ${this.array.length} ph·∫ßn t·ª≠`
                ]
            }
        });
    }

    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh visualization
     */
    async startVisualization() {
        if (this.isRunning) return;
        
        this.isRunning = true;
        this.runBtn.disabled = true;
        this.resetBtn.disabled = true;
        
        // Reset log counter v√† x√≥a log c≈© (tr·ª´ welcome message)
        this.logCounter = 0;
        this.clearLog(false);
        
        // T·∫°o c√°c b∆∞·ªõc cho thu·∫≠t to√°n
        this.generateSteps();
        this.currentStep = 0;
        
        // Th·ª±c thi t·ª´ng b∆∞·ªõc
        for (let step of this.steps) {
            await this.executeStep(step);
            await this.sleep(this.animationSpeed);
        }
        
        // K·∫øt th√∫c visualization
        this.isRunning = false;
        this.runBtn.disabled = false;
        this.resetBtn.disabled = false;
        this.updateStatus('Ho√†n th√†nh! M·∫£ng ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp th√†nh c√¥ng.');
    }

    /**
     * Th·ª±c thi m·ªôt b∆∞·ªõc c·ªßa thu·∫≠t to√°n
     * @param {Object} step - ƒê·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin v·ªÅ b∆∞·ªõc hi·ªán t·∫°i
     */
    async executeStep(step) {
        // Highlight d√≤ng code t∆∞∆°ng ·ª©ng
        this.highlightCodeLine(step.codeLine);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i m√¥ t·∫£
        this.updateStatus(step.description);
        
        // Th√™m log entry n·∫øu c√≥ logGroup
        if (step.logGroup) {
            this.addLogGroup(step.logGroup);
        }
        
        // C·∫≠p nh·∫≠t visualization d·ª±a tr√™n lo·∫°i b∆∞·ªõc
        this.updateVisualization(step);
    }

    /**
     * Highlight d√≤ng code ƒëang th·ª±c thi
     * @param {number} lineNumber - S·ªë d√≤ng code c·∫ßn highlight
     */
    highlightCodeLine(lineNumber) {
        // B·ªè highlight t·∫•t c·∫£ c√°c d√≤ng
        this.codeLines.forEach(line => line.classList.remove('highlight'));
        
        // Highlight d√≤ng hi·ªán t·∫°i
        if (lineNumber >= 0) {
            const targetLine = document.querySelector(`[data-line="${lineNumber}"]`);
            if (targetLine) {
                targetLine.classList.add('highlight');
            }
        }
    }

    /**
     * C·∫≠p nh·∫≠t visualization d·ª±a tr√™n b∆∞·ªõc hi·ªán t·∫°i
     * @param {Object} step - ƒê·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin v·ªÅ b∆∞·ªõc hi·ªán t·∫°i
     */
    updateVisualization(step) {
        const bars = this.arrayContainer.querySelectorAll('.array-bar');
        
        // Reset t·∫•t c·∫£ tr·∫°ng th√°i v·ªÅ m·∫∑c ƒë·ªãnh
        bars.forEach((bar, index) => {
            bar.className = 'array-bar';
            
            // ƒê√°nh d·∫•u c√°c ph·∫ßn t·ª≠ ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp (t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc)
            if (step.type !== 'start' && step.currentPos !== undefined && index < step.currentPos) {
                bar.classList.add('sorted');
            }
        });

        // √Åp d·ª•ng tr·∫°ng th√°i d·ª±a tr√™n lo·∫°i b∆∞·ªõc
        switch (step.type) {
            case 'compare':
                // Highlight ph·∫ßn t·ª≠ ƒëang so s√°nh
                if (step.comparePos !== undefined) {
                    bars[step.comparePos].classList.add('comparing');
                }
                // Highlight ph·∫ßn t·ª≠ nh·ªè nh·∫•t hi·ªán t·∫°i
                if (step.minIndex !== undefined) {
                    bars[step.minIndex].classList.add('minimum');
                }
                break;
                
            case 'update_min':
            case 'init_min':
                // Highlight ph·∫ßn t·ª≠ nh·ªè nh·∫•t
                if (step.minIndex !== undefined) {
                    bars[step.minIndex].classList.add('minimum');
                }
                break;
                
            case 'round_complete':
                // ƒê√°nh d·∫•u ph·∫ßn t·ª≠ ƒë√£ s·∫Øp x·∫øp
                if (step.sortedIndex !== undefined) {
                    bars[step.sortedIndex].classList.add('sorted');
                }
                break;
                
            case 'complete':
                // ƒê√°nh d·∫•u t·∫•t c·∫£ ph·∫ßn t·ª≠ ƒë√£ s·∫Øp x·∫øp
                bars.forEach(bar => {
                    bar.classList.add('sorted');
                });
                break;
        }

        // C·∫≠p nh·∫≠t gi√° tr·ªã v√† chi·ªÅu cao bar n·∫øu m·∫£ng ƒë√£ thay ƒë·ªïi
        if (step.array) {
            const maxValue = Math.max(...step.array);
            bars.forEach((bar, index) => {
                const valueLabel = bar.querySelector('.array-value');
                if (valueLabel && step.array[index] !== undefined) {
                    valueLabel.textContent = step.array[index];
                    // C·∫≠p nh·∫≠t chi·ªÅu cao bar theo gi√° tr·ªã m·ªõi
                    bar.style.height = `${(step.array[index] / maxValue) * 250}px`;
                }
            });
        }
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng b√°o tr·∫°ng th√°i
     * @param {string} message - Th√¥ng b√°o c·∫ßn hi·ªÉn th·ªã
     */
    updateStatus(message) {
        this.statusEl.textContent = message;
    }

    /**
     * Reset visualization v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
     */
    reset() {
        if (this.isRunning) return;
        
        // Reset c√°c bi·∫øn tr·∫°ng th√°i
        this.currentStep = 0;
        this.steps = [];
        this.logCounter = 0;
        
        // B·ªè highlight t·∫•t c·∫£ d√≤ng code
        this.codeLines.forEach(line => line.classList.remove('highlight'));
        
        // T·∫°o m·∫£ng m·ªõi
        this.generateRandomArray();
        
        // Reset log v·ªÅ welcome message
        this.clearLog();
        
        // Reset tr·∫°ng th√°i buttons
        this.runBtn.disabled = false;
        this.resetBtn.disabled = false;
    }

    /**
     * T·∫°o delay cho animation
     * @param {number} ms - Th·ªùi gian delay t√≠nh b·∫±ng milliseconds
     * @returns {Promise} Promise resolve sau th·ªùi gian delay
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Th√™m log group m·ªõi v√†o log container
     * @param {Object} logGroup - Object ch·ª©a th√¥ng tin log group
     */
    addLogGroup(logGroup) {
        // B·ªè highlight log tr∆∞·ªõc
        const currentLogs = this.logContainer.querySelectorAll('.log-item.current');
        currentLogs.forEach(log => log.classList.remove('current'));
        
        // T·∫°o log group m·ªõi
        const logGroupElement = document.createElement('div');
        logGroupElement.className = 'log-group current';
        
        // T·∫°o header cho group (n·∫øu c√≥ title)
        if (logGroup.title) {
            const groupHeader = document.createElement('div');
            groupHeader.className = 'log-group-header';
            
            const headerIcon = document.createElement('span');
            headerIcon.className = 'log-number';
            headerIcon.textContent = logGroup.icon;
            
            const headerTitle = document.createElement('span');
            headerTitle.className = 'log-group-title';
            headerTitle.textContent = logGroup.title;
            
            groupHeader.appendChild(headerIcon);
            groupHeader.appendChild(headerTitle);
            logGroupElement.appendChild(groupHeader);
        }
        
        // Th√™m n·ªôi dung
        const groupContent = document.createElement('div');
        groupContent.className = 'log-group-content';
        
        logGroup.content.forEach(line => {
            const contentLine = document.createElement('div');
            contentLine.className = 'log-content-line';
            contentLine.textContent = line;
            groupContent.appendChild(contentLine);
        });
        
        logGroupElement.appendChild(groupContent);
        
        // Th√™m v√†o container
        this.logContainer.appendChild(logGroupElement);
        
        // Auto scroll xu·ªëng log m·ªõi nh·∫•t
        logGroupElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        
        this.logCounter++;
    }

    /**
     * X√≥a t·∫•t c·∫£ log entries
     * @param {boolean} keepWelcome - C√≥ gi·ªØ l·∫°i welcome message kh√¥ng
     */
    clearLog(keepWelcome = true) {
        if (keepWelcome) {
            // X√≥a t·∫•t c·∫£ tr·ª´ welcome message
            const logs = this.logContainer.querySelectorAll('.log-item:not(.welcome), .log-group');
            logs.forEach(log => log.remove());
        } else {
            // X√≥a t·∫•t c·∫£
            this.logContainer.innerHTML = '';
        }
        this.logCounter = 0;
    }
}

/**
 * Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ load xong
 */
document.addEventListener('DOMContentLoaded', () => {
    // T·∫°o instance c·ªßa SelectionSortVisualizer
    const visualizer = new SelectionSortVisualizer();
    
    // Log th√¥ng tin v·ªÅ ·ª©ng d·ª•ng
    console.log('üì¢ Selection Sort Visualizer ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!');
    console.log('üîß Li√™n h·ªá: lequanganh253@gmail.com');
    console.log('üåê Website: https://lequanganh.id.vn');
    console.log('üíª GitHub: https://github.com/QuangAnh253');
});